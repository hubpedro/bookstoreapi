services:
  postgres:
    image: postgres:15-alpine
    container_name: spring-dev-db
    environment:
      POSTGRES_DB: postgresdb
      POSTGRES_USER: developer
      POSTGRES_PASSWORD: devpass
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - spring-network
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U developer -d postgresdb" ]
      interval: 10s
      timeout: 5s
      retries: 5

  springapp:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: spring-dev-app
    ports:
      - "8080:8080"
      - "5005:5005"
      - "35729:35729"
    command: >
      bash -c "
        &&
        mvn spring-boot:run -Dspring-boot.run.jvmArguments='-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=*:5005'
      "
    environment:
      - SPRING_PROFILES_ACTIVE=dev
      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres:5432/postgresdb
      - SPRING_DATASOURCE_USERNAME=developer
      - SPRING_DATASOURCE_PASSWORD=devpass
      - SPRING_DEVTOOLS_RESTART_ENABLED=true
      - SPRING_DEVTOOLS_LIVERELOAD_ENABLED=true
      - MAVEN_OPTS=-Xmx1024m
    networks:
      - spring-network
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - .:/app:rw
      - maven-cache:/root/.m2
      - target-cache:/app/target
    working_dir: /app
    stdin_open: true
    tty: true

volumes:
  postgres-data:
  maven-cache:
  target-cache:

networks:
  spring-network:
    driver: bridge